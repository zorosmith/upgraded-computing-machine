If you use data or code, please cite the following:

[1] Learning Human Activities and Object Affordances from RGB-D Videos, Hema S Koppula, Rudhir Gupta, Ashutosh Saxena. International Journal of Robotics Research (IJRR) 2013.




1) Segmentation

Description: code for graph based segmentation methods described in [1] 
Executable: segment
Usage: rosrun feature_generation segment <data directory> <activityLabelFile> <method> <threshold>
Example usage: rosrun feature_generation segment /data/Subject1_rgbd_rawtext/making_cereal/ activityLabel.txt  1 500

   method : takes the value 1 or 2 
   theshold : values 100, 500 and 1000 were used for the results reported in [1]. 

Input: activityLabelFile specifying all the activity ids and for each acivity id the following files are required: RGBD text file, skeleton file and global transform file
The activityLabelFile file along with the other required data files should be present in the specified data directory. 
Output: File : Segmentation.txt 
        Format: <id>;<segment_number>:<comma seperated leist of frame numbers>;<segment_number>:<comma seperated leist of frame numbers>;... 

2) Script to post-process generated segmentations.

Description: Segments which have less than 3 frames are merged with the following segment. Frames are sampled in order to make feature generation faster.
Script: scripts/mergeAndSampleSegments.pl
Usage: perl mergeAndSampleSegments.pl <data directory>
Example usage: perl scripts/mergeAndSampleSegments.pl /data/Subject1_rgbd_rawtext/making_cereal/

Input: Segmentation.txt in the current directory, labeling.txt in the specified data directory. 
Output: 
- Segmentation_labeling.txt 
- Segmentation_merged.txt 
- Segmentation_merged_labeled.txt
- Segmentation_sampled.txt (final segmentation file)
 


3) Extract object point cloud indices

Description: This step extracts the pointcloud indices of the objects using the provided image bounding boxes. 
- The biggest horizontal surface (table/ground) is extracted and removed
- The points which lie within the image bounding box are clustered and the indices corresponding to the biggest cluster are saved in a text file

Executable: extractOPC
Usage: rosrun feature_generation extractOPC <data_directory> <activityLabelFile> 
Example usage: rosrun feature_generation extractOPC /data/Subject1_rgbd_rawtext/making_cereal/ activityLabel.txt

Input: activityLabelFile file specifying all the activity ids and for each acivity id the following files are required: RGBD text file, object files and global transform file
The activityLabelFile file along with the other required data files should be present in the specified data directory.
Output: object indices files in data_drectory/objects/ directory (the objects directory needs to be created before running this code).



4) Feature Generation
   
Description: code for generating features described in [1]. The segment features can be directily generated for a fixed segmentation. 
We provide both segement-level and frame-level feature generation code and the corresponding learning code. 
The learning code which uses the frame-level features computes the segment-level features on the fly and hence is more flexible. 

  i) Segment-level feature generation:  
	Executable: featgenSeg
	Usage: rosrun feature_generation featgenSeg <data_directory> <activity_label_file>
	Example usage: rosrun feature_generation featgenSeg /data/Subject1_rgbd_rawtext/making_cereal/ activityLabel.txt
    Requires Segmentation_sampled.txt file in the directory from where the code is being run.

  ii) Frame-level feature generation:
	Executable: frameFeatgen
	Usage: rosrun feature_generation frameFeatgen <data_directory> <activity_label_file>
	Example usage: rosrun feature_generation frameFeatgen /data/Subject1_rgbd_rawtext/making_cereal/ activityLabel.txt
    Requires Segmentation_sampled.txt file in the directory from where the code is being run.


5) Format segment features for learning/inference

Description: script for converting the data_*.txt feature files to the format required by the learning/inference code. 
Note: This code binarizes the features, therefore use all feature data as input.

Script: run_format_data.sh
Usage: run_format_data.sh <output directory> <segmentation_method_name>
Example: sh run_format_data.sh /opt/ros/electric/stacks/human_activity_labeling/expts/ segmentation1 

Input: segment feature files data_*.txt generated from featgenSeg, Segmentation_labeling.txt file
Output: 1) formated feature files in output_dir/data/segmentation_method_name folder 
        2) a file in  output_dir/segments/segmentation_method_name folder which lists the files corresponding to each activity_id 

